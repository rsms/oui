#!/usr/bin/env node

var sys = require('sys'),
    path = require('path'),
    fs = require('fs'),
    Builder = require('./builder').Builder,
    trollop = require('./trollop'),
    cli = require('./cli');

var basedir = exports.basedir =
  path.dirname(path.dirname(fs.realpathSync(__filename)));

function mkbuilder(options, srcDirs) {
  var builder = new Builder();
  builder.cacheDir = options.no_cache ? undefined : options.cache_dir;
  builder.productsDir = options.output_dir;
  builder.productsName = options.output_name;
  builder.srcDirs = srcDirs;
  builder.force = options.force;
  builder.logLevel = options.verbose ? 2 : (options.quiet ? 0 : 1);
  builder.optimize = options.optimize;
  return builder;
}

function main(argv, options, callback) {
  if (options === 'function') {
    callback = options;
    options = undefined;
  }
  else if (typeof argv === 'function') {
    callback = argv;
    argv = undefined;
  }

  if (!Array.isArray(argv)) argv = process.argv;
  var inoptions = options;

  options = [
    'Usage: oui [options] <sourcedir> ..',
    'Options:',
    ['output_dir',  'Where to place built products.',
                    {short:'o', type:'string', def:'./build'}],
    ['output_name', 'Product(s) filename (excluding file extension).',
                    {short:'n', type:'string', def:'index'}],
    ['optimize',    'Compiler optimization level [0-3].',
                    {short:'O', def:2, type:'int'}],
    ['once',        'Only build once (do not watch for changes) and exit.',
                    {short:'s'}],
    ['cache_dir',   'Where to place intermediate build products.',
                    {short:'C', type:'string', def:'./.build-cache'}],
    ['no_cache',    'Disable caching of intermediate build products.',
                    {short:'none'}],
    /*['no_stdlib',   'Do not link with the client standard library.',
                    {short:'N'}],
    ['stdlib_path', 'Custom location of client standard library.',
                    {long:'stdlib', short:'S', type:'string'}],*/
    ['force',       'Force rebuild.'],
    ['quiet',       'Silent operation.'],
    ['verbose',     'Verbose operation.'],
    ['help',        'Show this help message.'],
  ];
  options = trollop.options(argv, options, function(){
    // trollop parser initializer
  });

  // inherit options
  if (typeof inoptions === 'object') {
    mixin(inoptions, options);
    options = inoptions;
  }

  // strip away ["node", "script"]
  argv = argv.slice(2);

  if (!callback){callback=function(err){
    if (err) {
      sys.print(cli.style('red'));
      sys.log('build failed: '+cli.style('fg:reset')+(err.stack || err));
      if (options.once) process.exit(1);
    } else {
      sys.print(cli.style('green'));
      sys.log('build OK'+cli.style('fg:reset'));
      if (options.once) process.exit(0);
    }
  }}

  var watchedSources = {}, isBuilding = false, build;

  // TODO: watch for new files (watch directories)

  var watcher = function(ev) {
    var builder = this,
        watchedFilenames = Object.keys(watchedSources),
        currentFilenames = this.sources.map(function(x){ return x.filename; }),
        L = Math.max(watchedFilenames.length, currentFilenames.length);
    for (var i=0;i<L;i++) { (function(){
      var fn = currentFilenames[i];
      if (fn === undefined) {
        // case: file disappeared
        if (fn in watchedSources) {
          fs.unwatchFile(watchedFilenames[i]);
          delete watchedSources[fn];
        }
      } else if (!(fn in watchedSources)) {
        watchedSources[fn] = fs.statSync(fn); // todo make async
        builder.log('watching '+JSON.stringify(fn)+' for changes...', 2);
        fs.watchFile(fn, {interval:100}, function (curr, prev) {
          if (curr.mtime.getTime() === prev.mtime.getTime()) return;
          if (!isBuilding) {
            builder.log('! '+fn, 1);
            build();
          } else {
            builder.log('warn: todo: unhandled change detected in '+
              JSON.stringify(fn)+' while building', 1);
          }
        });
      }
    })();}
  };

  var buildCount = 0;

  build = function() {
    if (++buildCount > 1 && options.force) {
      // only perform forcefull build the first time
      delete options.force;
    }
    var builder = mkbuilder(options, argv);
    if (!options.once) {
      builder.addListener('collect', watcher);
      isBuilding = true;
      builder.all(function(err){
        isBuilding = false;
        if (callback) callback(err);
      });
    } else {
      builder.all(callback);
    }
  }

  build();
}

main();
